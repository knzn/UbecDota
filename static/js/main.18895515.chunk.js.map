{"version":3,"sources":["Components/Navbar.js","Components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","setState","activeItem","this","Menu","stackable","inverted","Item","src","alt","active","onClick","Component","SearchBar","handleSubmit","handleSearch","Form","className","onSubmit","Group","onChange","Input","placeholder","Button","content","App","searchField","target","value","fetch","then","response","json","data","obj","profile","rank","mmr_estimate","datas","console","log","Card","Image","avatarfull","wrapped","ui","Content","Header","personaname","Meta","estimate","Description","extra","Icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RA4CeA,E,2MAxCbC,MAAQ,G,EAERC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAAEC,WAAYF,K,wEAErD,IACAE,EAAeC,KAAKN,MAApBK,WACR,OACE,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAQ,GACtB,kBAACF,EAAA,EAAKG,KAAN,KACE,yBAAKC,IAAI,yCAAyCC,IAAI,UAGxD,kBAACL,EAAA,EAAKG,KAAN,CACEP,KAAK,WACLU,OAAuB,aAAfR,EACRS,QAASR,KAAKL,iBAHhB,YAQA,kBAACM,EAAA,EAAKG,KAAN,CACEP,KAAK,eACLU,OAAuB,iBAAfR,EACRS,QAASR,KAAKL,iBAHhB,gBAQA,kBAACM,EAAA,EAAKG,KAAN,CACEP,KAAK,UACLU,OAAuB,YAAfR,EACRS,QAASR,KAAKL,iBAHhB,gB,GA7Bac,a,SC0BNC,G,OAxBG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACjC,OACE,6BACE,yCACA,kBAACC,EAAA,EAAD,CAAMC,UAAU,aAAaC,SAAUJ,GACrC,kBAACE,EAAA,EAAKG,MAAN,CAAYC,SAAUL,GACpB,kBAACC,EAAA,EAAKK,MAAN,CAAYC,YAAY,YAAYtB,KAAK,YACzC,kBAACgB,EAAA,EAAKO,OAAN,CAAaC,QAAQ,gB,0BC2DhBC,E,YAjEb,aAAe,IAAD,8BACZ,+CAeFV,aAAe,SAAAhB,GACb,EAAKE,SAAS,CAAEyB,YAAa3B,EAAE4B,OAAOC,SAjB1B,EAoBdd,aAAe,WACbe,MAAM,wCAAD,OACqC,EAAKhC,MAAM6B,YADhD,MAEHI,MAAK,SAAAC,GAAQ,OACbA,EACGC,OACAF,MAAK,SAAAG,GAAI,OACR,EAAKhC,SAAS,CAAEiC,IAAKD,EAAKE,QAASC,KAAMH,EAAKI,sBAzBpD,EAAKxC,MAAQ,CACX6B,YAAa,GACbS,QAAS,GACTD,IAAK,GACLE,KAAM,IANI,E,iFAUO,IAAD,OAClBP,MAAM,mDAAmDC,MAAK,SAAAC,GAAQ,OACpEA,EAASC,OAAOF,MAAK,SAAAQ,GAAK,OAAI,EAAKrC,SAAS,CAAEiC,IAAKI,Y,+BAwBrD,OAHAC,QAAQC,IAAIrC,KAAKN,MAAMqC,KAIrB,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEF,aAAcZ,KAAKY,aACnBD,aAAcX,KAAKW,eAErB,kBAAC2B,EAAA,EAAD,CAAMxB,UAAU,aACd,kBAACyB,EAAA,EAAD,CAAOlC,IAAKL,KAAKN,MAAMqC,IAAIS,WAAYC,SAAO,EAACC,IAAI,IACnD,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKM,OAAN,KAAc5C,KAAKN,MAAMqC,IAAIc,aAC7B,kBAACP,EAAA,EAAKQ,KAAN,KACE,0BAAMhC,UAAU,QAAQd,KAAKN,MAAMuC,KAAKc,WAE1C,kBAACT,EAAA,EAAKU,YAAN,oDAIF,kBAACV,EAAA,EAAKK,QAAN,CAAcM,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMrD,KAAK,SADb,qB,GAxDMY,aCOE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.18895515.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nclass Navbar extends Component {\r\n  state = {};\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    return (\r\n      <Menu stackable inverted>\r\n        <Menu.Item>\r\n          <img src=\"https://react.semantic-ui.com/logo.png\" alt=\"logo\" />\r\n        </Menu.Item>\r\n\r\n        <Menu.Item\r\n          name=\"features\"\r\n          active={activeItem === \"features\"}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          Features\r\n        </Menu.Item>\r\n\r\n        <Menu.Item\r\n          name=\"testimonials\"\r\n          active={activeItem === \"testimonials\"}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          Testimonials\r\n        </Menu.Item>\r\n\r\n        <Menu.Item\r\n          name=\"sign-in\"\r\n          active={activeItem === \"sign-in\"}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          Sign-in\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nimport \"../App.css\";\r\n\r\nconst SearchBar = ({ handleSubmit, handleSearch }) => {\r\n  return (\r\n    <div>\r\n      <h1>Search ID</h1>\r\n      <Form className=\"search-bar\" onSubmit={handleSubmit}>\r\n        <Form.Group onChange={handleSearch}>\r\n          <Form.Input placeholder=\"Dota 2 ID\" name=\"dota id\" />\r\n          <Form.Button content=\"Search\" />\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n//   <div>\r\n//     <h1>Search ID</h1>\r\n//     <Form className=\"search-bar\" onSubmit={props.handleSubmit}>\r\n//       <Form.Group onChange={props.handleSearch}>\r\n//         <Form.Input placeholder=\"Dota 2 ID\" name=\"dota id\" />\r\n//         <Form.Button content=\"Search\" />\r\n//       </Form.Group>\r\n//     </Form>\r\n//   </div>\r\n// );\r\n\r\nexport default SearchBar;\r\n// class SearchBar extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <h1>Search ID</h1>\r\n//         <Form className=\"search-bar\" onSubmit={this.handleSubmit}>\r\n//           <Form.Group onChange={this.handleSearch}>\r\n//             <Form.Input placeholder=\"Dota 2 ID\" name=\"dota id\" />\r\n//             <Form.Button content=\"Search\" />\r\n//           </Form.Group>\r\n//         </Form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport SearchBar from \"./Components/SearchBar\";\nimport { Card, Image, Icon } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      profile: \"\",\n      obj: \"\",\n      rank: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.opendota.com/api/players/107828036/\").then(response =>\n      response.json().then(datas => this.setState({ obj: datas }))\n    );\n  }\n\n  handleSearch = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  handleSubmit = () => {\n    fetch(\n      `https://api.opendota.com/api/players/${this.state.searchField}/`\n    ).then(response =>\n      response\n        .json()\n        .then(data =>\n          this.setState({ obj: data.profile, rank: data.mmr_estimate })\n        )\n    );\n  };\n\n  render() {\n    console.log(this.state.obj);\n    // const profiles = this.state.profile.map(prof => prof.personaname);\n\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <SearchBar\n          handleSearch={this.handleSearch}\n          handleSubmit={this.handleSubmit}\n        />\n        <Card className=\"card-info\">\n          <Image src={this.state.obj.avatarfull} wrapped ui={false} />\n          <Card.Content>\n            <Card.Header>{this.state.obj.personaname}</Card.Header>\n            <Card.Meta>\n              <span className=\"date\">{this.state.rank.estimate}</span>\n            </Card.Meta>\n            <Card.Description>\n              Matthew is a musician living in Nashville.\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <a>\n              <Icon name=\"user\" />\n              22 Friends\n            </a>\n          </Card.Content>\n        </Card>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-less/semantic.less\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}